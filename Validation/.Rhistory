sortind<-list()
#create numeric
for(i in as.numeric(numit$Var1)) sortind[[i]]<-paste(numit$Var1[i], formatC(1:numit$Freq[i], width=3, format="d", flag="0"), sep=".")
Metadata$sort<-as.numeric(unlist(sortind))
write.table(Metadata, "./ValidationMetadata.csv", sep=",", fileEncoding="UTF-8", row.names = F)
###########################################################################
# render Validation.Rmd
render("./Validation.Rmd")
#rbind
source("./function.R")
file.copy("ValidationData.csv", "../covid19socialmonitoring.csv", overwrite = TRUE)
file.copy("ValidationMetadata.csv", "../Metadata.csv", overwrite = TRUE)
# Validation.R
###########################################################################
# working direcotory
getwd()
#setwd("C:/gitrepos/covid19monitoring/Validation")
#setwd("/home/klk/Documents/gitrepos/covid19monitoring/Validation")
###########################################################################
# import function
source("./function.R")
###########################################################################
# import libraries
library(readr) # Version: ‘1.3.1’
library(ggplot2) # Version: ‘3.1.0’
library(rmarkdown)
###########################################################################
# format numbers
options(scipen = 1000000)
options(digits = 6)
###########################################################################
# import data
Other_Weather <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_other_Weather/master/Other_Weather.csv")
Mobility_VBZHardbruecke <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_mobility_VBZHardbruecke/master/Mobility_VBZHardbruecke.csv")
Mobility_Intervista <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_mobility_intervista/master/Mobility_Intervista.csv")
Economy_SMI <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_economy_SMI/master/Economy_SMI.csv")
Economy_FlightTrafficZRH <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_economy_FlightTraffic/master/Economy_FlightTraffic.csv")
Economy_SIX <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_economy_SIX/master/Economy_SIX.csv")
Education_Mindmaps <- ImportUrl("https://raw.githubusercontent.com/bildungsmonitoringZH/covid19_edu_mindsteps/master/Bildung_LernplattformMindsteps.csv")
Education_LMVZ <- ImportUrl("https://raw.githubusercontent.com/bildungsmonitoringZH/covid19_edu_lmvzmath/master/Bildung_TrainingMathematik.csv?token=AO5R67VPEU2FROXN54WVXB26VEJVI")
Health_Covid19Cases <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_health_covid19cases/master/Health_covid19cases.csv?token=AJX6OIIM25TY22U7N4OKQHS6R3KX6")
Economy_KOF <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_economy_KOF/master/Economy_KOF.csv")
Mobility_SBBHauptbahnhof <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_mobility_SBBHauptbahnhof/master/Mobility_SBBHauptbahnhof.csv")
Mobility_ZaehlstellenMIVLVVelo<- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_mobility_ZaehlstellenMIVLVVelo/master/Mobilit%C3%A4t_AufkommenTerrestrischerVerkehr.csv")
Social_SWISSIX <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_social_SWISSIX/master/Social_SWISSIX.csv")
Education_KITA <- ImportUrl("https://raw.githubusercontent.com/bildungsmonitoringZH/covid19_edu_ajb/master/Bildung_Kita.csv?token=AO5R67QPGQ6SNWMC67X4XU26UFNXM")
Economy_AWA <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_economy_AWA/master/Economy_AWA.csv")
Mobility_VerkehrsmessstellenKantonZH <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_mobility_VerkehrsmessstellenKantonZH/master/Mobility_VerkehrsmessstellenKantonZH.csv")
Bildung_Lehrvertraege <- ImportUrl("https://raw.githubusercontent.com/bildungsmonitoringZH/covid19_edu_bista/master/Bildung_Lehrvertraege.csv")
Economy_Kreditkarten <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_economy_Kreditkarten/master/Economy_Kreditkarten.csv")
Social_SwissgridEnergie <- ImportUrl("https://raw.githubusercontent.com/statistikZH/covid19monitoring_social_EnergieSwissgrid/master/Social_SwissgridEnergie.csv?token=AJX6OINORKKK5GAIH5NTR4C6VFSO2")
Bildung_IliasNutzung <- ImportUrl("https://raw.githubusercontent.com/bildungsmonitoringZH/covid19_edu_phzh/master/Bildung_IliasNutzung.csv")
#mydf <- ImportUrl("")
# View(Education_Mindmaps[order(Education_Mindmaps$date, decreasing = TRUE),]); View(Education_LMVZ[order(Education_LMVZ$date, decreasing = TRUE),]); View(Education_KITA[order(Education_KITA$date, decreasing = TRUE),]); View(Social_SWISSIX[order(Social_SWISSIX$date, decreasing = TRUE),]); View(Mobility_SBBHauptbahnhof[order(Mobility_SBBHauptbahnhof$date, decreasing = TRUE),])
###########################################################################
# check if variable names follow the standard
CheckIfDfFollowsStandard1(Other_Weather)
CheckIfDfFollowsStandard1(Mobility_VBZHardbruecke)
CheckIfDfFollowsStandard1(Mobility_Intervista)
CheckIfDfFollowsStandard1(Economy_SMI)
CheckIfDfFollowsStandard1(Economy_FlightTrafficZRH)
CheckIfDfFollowsStandard1(Economy_SIX)
CheckIfDfFollowsStandard1(Education_Mindmaps)
CheckIfDfFollowsStandard1(Education_LMVZ)
CheckIfDfFollowsStandard1(Health_Covid19Cases)
CheckIfDfFollowsStandard1(Mobility_SBBHauptbahnhof)
CheckIfDfFollowsStandard1(Mobility_ZaehlstellenMIVLVVelo)
CheckIfDfFollowsStandard1(Social_SWISSIX)
CheckIfDfFollowsStandard1(Education_KITA)
CheckIfDfFollowsStandard1(Economy_AWA)
CheckIfDfFollowsStandard1(Mobility_VerkehrsmessstellenKantonZH)
CheckIfDfFollowsStandard1(Bildung_Lehrvertraege)
CheckIfDfFollowsStandard1(Economy_Kreditkarten)
CheckIfDfFollowsStandard1(Social_SwissgridEnergie)
CheckIfDfFollowsStandard1(Bildung_IliasNutzung)
#CheckIfDfFollowsStandard1()
###########################################################################
# rbind
covid19monitoring <- rbind(Other_Weather,
Mobility_VBZHardbruecke,
Mobility_Intervista,
Economy_SMI,
Economy_FlightTrafficZRH,
Economy_SIX,
Education_Mindmaps,
Education_LMVZ,
Health_Covid19Cases,
Economy_KOF,
Mobility_SBBHauptbahnhof,
Mobility_ZaehlstellenMIVLVVelo,
Social_SWISSIX,
Education_KITA,
Economy_AWA,
Mobility_VerkehrsmessstellenKantonZH,
Bildung_Lehrvertraege,
Economy_Kreditkarten,
Social_SwissgridEnergie,
Bildung_IliasNutzung
)
###########################################################################
# Export
write.table(covid19monitoring, "./ValidationData.csv", sep=",", fileEncoding="UTF-8", row.names = F)
# Export Metadata
covid19monitoring_sel <- covid19monitoring[, ! names(covid19monitoring) %in% c("date", "value")]
unique_rows <- !duplicated(covid19monitoring_sel[names(covid19monitoring_sel)])
Metadata <- covid19monitoring_sel[unique_rows,]
Metadata$last_modified <- Sys.Date()
Metadata$topic<-as.factor(Metadata$topic)
Metadata$topic<-factor(Metadata$topic, levels=c("Mobilität", "Wirtschaft", "Soziales", "Gesundheit", "Bildung", "Sonstiges"))
Metadata<-Metadata[order(as.numeric(Metadata$topic), Metadata$variable_long),]
#Numberof items in topic
numit<-data.frame(table(as.numeric(Metadata$topic)))
sortind<-list()
#create numeric
for(i in as.numeric(numit$Var1)) sortind[[i]]<-paste(numit$Var1[i], formatC(1:numit$Freq[i], width=3, format="d", flag="0"), sep=".")
Metadata$sort<-as.numeric(unlist(sortind))
write.table(Metadata, "./ValidationMetadata.csv", sep=",", fileEncoding="UTF-8", row.names = F)
###########################################################################
# render Validation.Rmd
render("./Validation.Rmd")
#rbind
source("./function.R")
file.copy("ValidationData.csv", "../covid19socialmonitoring.csv", overwrite = TRUE)
file.copy("ValidationMetadata.csv", "../Metadata.csv", overwrite = TRUE)
# import libraries
library(sf)
library(dplyr)
library(RColorBrewer)
library(readr)
options(scipen = 1000000)
options(digits = 6)
gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/GemeindeAlleSeeOhneExklave_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
gem_sel <- gem %>% filter(GDE_ID == 230)
see <-  gem %>% filter(ART_N == "See")
bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/Bezirke_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
hallenbad <- st_read("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/GeokodierteHallenbaeder/Data_out/Hallenbaeder_P_KTZH_2020.shp", stringsAsFactors = FALSE, crs = 2056)
WohnortBadegaeste <- read_csv("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/Wohnort Badegäste.csv")
WohnortBadegaeste
WohnortBadegaeste <- read_csv2("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/Wohnort Badegäste.csv")
View(WohnortBadegaeste)
View(WohnortBadegaeste)
names(gem)
names(WohnortBadegaeste)
gem <- gem %>%
left_join(WohnortBadegaeste, by = c("GDE_ID", "BFS"))
gem <- gem %>%
left_join(WohnortBadegaeste, by = c("GDE_ID" = "BFS"))
View(gem)
#gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/GemeindeAlleSeeOhneExklave_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3g_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
gem_sel <- gem %>% filter(GDE_ID == 230)
#gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/GemeindeAlleSeeOhneExklave_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3g_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
#gem_sel <- gem %>% filter(GDE_ID == 230)
see <-  gem %>% filter(ART_N == "See")
#gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/GemeindeAlleSeeOhneExklave_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3g_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
#gem_sel <- gem %>% filter(GDE_ID == 230)
#see <-  gem %>% filter(ART_N == "See")
bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3b_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
#bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/Bezirke_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
hallenbad <- st_read("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/GeokodierteHallenbaeder/Data_out/Hallenbaeder_P_KTZH_2020.shp", stringsAsFactors = FALSE, crs = 2056)
WohnortBadegaeste <- read_csv2("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/Wohnort Badegäste.csv")
#gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/GemeindeAlleSeeOhneExklave_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3g_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
#gem_sel <- gem %>% filter(GDE_ID == 230)
#see <-  gem %>% filter(ART_N == "See")
see <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_k3s_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
#bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/Bezirke_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3b_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
hallenbad <- st_read("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/GeokodierteHallenbaeder/Data_out/Hallenbaeder_P_KTZH_2020.shp", stringsAsFactors = FALSE, crs = 2056)
WohnortBadegaeste <- read_csv2("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/Wohnort Badegäste.csv")
gem <- gem %>%
left_join(WohnortBadegaeste, by = c("GDE_ID" = "BFS"))
names(gem)
gem <- gem %>%
left_join(WohnortBadegaeste, by = c("GMDNR" = "BFS"))
mybreaks <- quantile(gem$GDE_ID, na.rm = TRUE)
gem_prep <- gem %>%
#codiere Einkommenskategorien
mutate(value=cut(GDE_ID,breaks=mybreaks,include.lowest = TRUE, right=F))
mybreaks <- quantile(gem$GMDNR, na.rm = TRUE)
gem_prep <- gem %>%
#codiere Einkommenskategorien
mutate(value=cut(GDE_ID,breaks=mybreaks,include.lowest = TRUE, right=F))
mybreaks <- quantile(gem$GMDNR, na.rm = TRUE)
gem_prep <- gem %>%
#codiere Einkommenskategorien
mutate(value=cut(GMDNR,breaks=mybreaks,include.lowest = TRUE, right=F))
#OPTIONAL: generiere etwas besser lesbare Kategorien-Labels (Werte in '000)
#labels=paste(c(0,breaks[c(-1,-length(breaks))])," - ", (breaks[-1]-1)),include.lowest=T, right=F))
View(gem_prep)
cols <- brewer.pal(4, "Greens")
gem_prep$col <- cols[findInterval(gem_prep$GDE_ID, vec = as.vector(mybreaks))]
cols <- brewer.pal(4, "Greens")
gem_prep$col <- cols[findInterval(gem_prep$GMDNR, vec = as.vector(mybreaks))]
#View(gem_prep)
table(gem_prep$col)
table(gem_prep$value)
View(gem_prep)
t <- levels(cut(gem_prep$GDE_ID,breaks=mybreaks,include.lowest = TRUE, right=F))
t <- levels(cut(gem_prep$GMDNR,breaks=mybreaks,include.lowest = TRUE, right=F))
x_bbox <- 2669256 # Meteragaben
y_bbox <- 1223896
x_add <- 47644/2
y_add <- 59438/2
bbox_coord = list(rbind(
c(x_bbox, y_bbox),
c(x_bbox, y_bbox+y_add),
c(x_bbox+x_add, y_bbox+y_add),
c(x_bbox+x_add, y_bbox),
c(x_bbox, y_bbox)))
bbox <- st_polygon(bbox_coord) %>%
st_sfc() %>%
st_set_crs(2056)
beschrifutungspunkt <- st_point_on_surface(gem) %>% st_coordinates() %>% as.data.frame()
gem$x <- beschrifutungspunkt$X
gem$y <- beschrifutungspunkt$Y
View(gem)
pdf("./map.pdf", paper='A4r')
legendText1 <- levels(cut(gem_prep$GDE_ID,breaks=mybreaks,include.lowest = TRUE, right=F))
pdf("./map.pdf", paper='A4r')
legendText1 <- levels(cut(gem_prep$GMDNR,breaks=mybreaks,include.lowest = TRUE, right=F))
LegendText2 <- "Hallenbad"
fill1 <- cols
fill2 <- NA
par(mar=c(0,0,0,10) )
par(oma=c(0,0,0,0))
#plot(st_geometry(bbox), border="#F8F8FF")
plot(st_geometry(gem), lwd = 0.5, border="#808080", col = gem_prep$col)
plot(st_geometry(see), lwd = 0.5, border="#808080", col = "#b3ecff", add = TRUE)
plot(st_geometry(bez), lwd = 2, border= "#808080", add = TRUE)
plot(st_geometry(gem_sel), lwd = 3, border="#000000", add = TRUE)
plot(st_geometry(hallenbad), pch = 20, col = "#33ccff", cex = 2, add = TRUE)
text(x = gem$x, y = gem$y,  labels = gem$GDE_ID, cex = 0.5)
legend("topright", #x = x_bbox+x_add+5000, y = y_bbox+y_add+5000,
inset = c(- 0.25, 0),
legend = c(legendText1, LegendText2),
fill = c(fill1, fill2),
border =  c("#000000", "#000000", "#000000", "#000000", NA),
pch = c(NA, NA, NA, NA, 20),
col = c(NA, NA, NA, NA, "#33ccff"),
pt.cex = c(1, 2, 1, 1, 2),
bty = "n", # no black bounding boy around legend
xpd=TRUE)
#box(col="red") # plot
#box("figure", col="forestgreen") # mar
#box("outer", col="blue")  # oma
dev.off()
# import libraries
library(sf)
library(dplyr)
library(RColorBrewer)
library(readr)
options(scipen = 1000000)
options(digits = 6)
#gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/GemeindeAlleSeeOhneExklave_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3g_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
#gem_sel <- gem %>% filter(GDE_ID == 230)
#see <-  gem %>% filter(ART_N == "See")
see <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_k3s_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
#bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/Bezirke_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3b_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
hallenbad <- st_read("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/GeokodierteHallenbaeder/Data_out/Hallenbaeder_P_KTZH_2020.shp", stringsAsFactors = FALSE, crs = 2056)
WohnortBadegaeste <- read_csv2("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/Wohnort Badegäste.csv")
gem <- gem %>%
left_join(WohnortBadegaeste, by = c("GMDNR" = "BFS"))
mybreaks <- quantile(gem$ANZAHL, na.rm = TRUE)
gem_prep <- gem %>%
#codiere Einkommenskategorien
mutate(value=cut(ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
mybreaks <- quantile(gem$ANZAHL, na.rm = TRUE)
mybreaks
mybreaks <- c(10, 20, 30, 40, 50)#quantile(gem$ANZAHL, na.rm = TRUE)
gem_prep <- gem %>%
#codiere Einkommenskategorien
mutate(value=cut(ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
#OPTIONAL: generiere etwas besser lesbare Kategorien-Labels (Werte in '000)
#labels=paste(c(0,breaks[c(-1,-length(breaks))])," - ", (breaks[-1]-1)),include.lowest=T, right=F))
View(gem_prep)
# import libraries
library(sf)
library(dplyr)
library(RColorBrewer)
library(readr)
options(scipen = 1000000)
options(digits = 6)
#gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/GemeindeAlleSeeOhneExklave_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3g_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
#gem_sel <- gem %>% filter(GDE_ID == 230)
#see <-  gem %>% filter(ART_N == "See")
see <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_k3s_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
#bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/Bezirke_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3b_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
hallenbad <- st_read("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/GeokodierteHallenbaeder/Data_out/Hallenbaeder_P_KTZH_2020.shp", stringsAsFactors = FALSE, crs = 2056)
WohnortBadegaeste <- read_csv2("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/Wohnort Badegäste.csv")
gem <- gem %>%
left_join(WohnortBadegaeste, by = c("GMDNR" = "BFS"))
mybreaks <- c(10, 20, 30, 40, 50)#quantile(gem$ANZAHL, na.rm = TRUE)
gem_prep <- gem %>%
#codiere Einkommenskategorien
mutate(value=cut(ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
#OPTIONAL: generiere etwas besser lesbare Kategorien-Labels (Werte in '000)
#labels=paste(c(0,breaks[c(-1,-length(breaks))])," - ", (breaks[-1]-1)),include.lowest=T, right=F))
View(gem_prep)
cols <- brewer.pal(4, "Greens")
gem_prep$col <- cols[findInterval(gem_prep$ANZAHL, vec = as.vector(mybreaks))]
cols <- brewer.pal(4, "Greens")
gem_prep$col <- cols[findInterval(gem_prep$ANZAHL, vec = as.vector(mybreaks))]
cols[findInterval(gem_prep$ANZAHL, vec = as.vector(mybreaks))]
mybreaks <- c(10, 20, 30, 40, 50)#quantile(gem$ANZAHL, na.rm = TRUE)
gem_prep <- gem %>%
#codiere Einkommenskategorien
mutate(value=cut(ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
#OPTIONAL: generiere etwas besser lesbare Kategorien-Labels (Werte in '000)
#labels=paste(c(0,breaks[c(-1,-length(breaks))])," - ", (breaks[-1]-1)),include.lowest=T, right=F))
View(gem_prep)
mybreaks
mybreaks <- c(0, 20, 30, 40, 50)#quantile(gem$ANZAHL, na.rm = TRUE)
gem_prep <- gem %>%
filter(!is.na(ANZAHL))
#codiere Einkommenskategorien
mutate(value=cut(ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
mybreaks <- c(0, 20, 30, 40, 50)#quantile(gem$ANZAHL, na.rm = TRUE)
gem_prep <- gem %>%
filter(!is.na(ANZAHL)) %>%
#codiere Einkommenskategorien
mutate(value=cut(ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
#OPTIONAL: generiere etwas besser lesbare Kategorien-Labels (Werte in '000)
#labels=paste(c(0,breaks[c(-1,-length(breaks))])," - ", (breaks[-1]-1)),include.lowest=T, right=F))
View(gem_prep)
mybreaks <- c(0, 20, 30, 40, 50)#quantile(gem$ANZAHL, na.rm = TRUE)
gem_prep <- gem %>%
filter(!is.na(ANZAHL)) %>%
#codiere Einkommenskategorien
mutate(value=cut(ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F)) %>%
#OPTIONAL: generiere etwas besser lesbare Kategorien-Labels (Werte in '000)
#labels=paste(c(0,breaks[c(-1,-length(breaks))])," - ", (breaks[-1]-1)),include.lowest=T, right=F))
arrange(ANZAHL)
View(gem_prep %>% select(ANZAHL, value))
View(gem)
?table
table(gem$ANZAHL, useNA ) c("always")
table(gem$ANZAHL, useNA = c("always"))
View(gem_prep %>% select(ANZAHL, value))
cols <- brewer.pal(4, "Greens")
gem_prep$col <- cols[findInterval(gem_prep$ANZAHL, vec = as.vector(mybreaks))]
#View(gem_prep)
table(gem_prep$col)
table(gem_prep$value)
View(gem_prep)
t <- levels(cut(gem_prep$ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
x_bbox <- 2669256 # Meteragaben
y_bbox <- 1223896
x_add <- 47644/2
y_add <- 59438/2
bbox_coord = list(rbind(
c(x_bbox, y_bbox),
c(x_bbox, y_bbox+y_add),
c(x_bbox+x_add, y_bbox+y_add),
c(x_bbox+x_add, y_bbox),
c(x_bbox, y_bbox)))
bbox <- st_polygon(bbox_coord) %>%
st_sfc() %>%
st_set_crs(2056)
beschrifutungspunkt <- st_point_on_surface(gem) %>% st_coordinates() %>% as.data.frame()
gem$x <- beschrifutungspunkt$X
gem$y <- beschrifutungspunkt$Y
View(gem)
pdf("./map.pdf", paper='A4r')
pdf("./map.pdf", paper='A4r')
legendText1 <- levels(cut(gem_prep$ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
LegendText2 <- "Hallenbad"
fill1 <- cols
fill2 <- NA
par(mar=c(0,0,0,10) )
par(oma=c(0,0,0,0))
#plot(st_geometry(bbox), border="#F8F8FF")
plot(st_geometry(gem), lwd = 0.5, border="#808080", col = gem_prep$col)
plot(st_geometry(see), lwd = 0.5, border="#808080", col = "#b3ecff", add = TRUE)
plot(st_geometry(bez), lwd = 2, border= "#808080", add = TRUE)
plot(st_geometry(gem_sel), lwd = 3, border="#000000", add = TRUE)
plot(st_geometry(hallenbad), pch = 20, col = "#33ccff", cex = 2, add = TRUE)
text(x = gem$x, y = gem$y,  labels = gem$GDE_ID, cex = 0.5)
legend("topright", #x = x_bbox+x_add+5000, y = y_bbox+y_add+5000,
inset = c(- 0.25, 0),
legend = c(legendText1, LegendText2),
fill = c(fill1, fill2),
border =  c("#000000", "#000000", "#000000", "#000000", NA),
pch = c(NA, NA, NA, NA, 20),
col = c(NA, NA, NA, NA, "#33ccff"),
pt.cex = c(1, 2, 1, 1, 2),
bty = "n", # no black bounding boy around legend
xpd=TRUE)
#box(col="red") # plot
#box("figure", col="forestgreen") # mar
#box("outer", col="blue")  # oma
dev.off()
View(WohnortBadegaeste)
View(gem)
View(gem)
View(gem_prep)
pdf("./map.pdf", paper='A4r')
pdf("./map.pdf", paper='A4r')
legendText1 <- levels(cut(gem_prep$ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
LegendText2 <- "Hallenbad"
fill1 <- cols
fill2 <- NA
par(mar=c(0,0,0,10) )
par(oma=c(0,0,0,0))
#plot(st_geometry(bbox), border="#F8F8FF")
plot(st_geometry(gem_prep), lwd = 0.5, border="#808080", col = gem_prep$col)
plot(st_geometry(see), lwd = 0.5, border="#808080", col = "#b3ecff", add = TRUE)
plot(st_geometry(bez), lwd = 2, border= "#808080", add = TRUE)
plot(st_geometry(gem_sel), lwd = 3, border="#000000", add = TRUE)
plot(st_geometry(hallenbad), pch = 20, col = "#33ccff", cex = 2, add = TRUE)
text(x = gem$x, y = gem$y,  labels = gem$GDE_ID, cex = 0.5)
legend("topright", #x = x_bbox+x_add+5000, y = y_bbox+y_add+5000,
inset = c(- 0.25, 0),
legend = c(legendText1, LegendText2),
fill = c(fill1, fill2),
border =  c("#000000", "#000000", "#000000", "#000000", NA),
pch = c(NA, NA, NA, NA, 20),
col = c(NA, NA, NA, NA, "#33ccff"),
pt.cex = c(1, 2, 1, 1, 2),
bty = "n", # no black bounding boy around legend
xpd=TRUE)
#box(col="red") # plot
#box("figure", col="forestgreen") # mar
#box("outer", col="blue")  # oma
dev.off()
rm(list = ls())
# import libraries
library(sf)
library(dplyr)
library(RColorBrewer)
library(readr)
options(scipen = 1000000)
options(digits = 6)
#gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/GemeindeAlleSeeOhneExklave_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
gem <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3g_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
gem_sel <- gem %>% filter(GMDNR ==  	3271)
#see <-  gem %>% filter(ART_N == "See")
see <-  st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_k3s_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
#bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/Bezirke_gen_F_KTZH_2019.shp", stringsAsFactors = FALSE, crs=2056)
bez <- st_read("L:/STAT/08_DS/03_GIS/Geodaten/2019/swissBOUNDARIES3D_gen_K3b_F_CH_2019.shp", stringsAsFactors = FALSE, crs=2056)
hallenbad <- st_read("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/GeokodierteHallenbaeder/Data_out/Hallenbaeder_P_KTZH_2020.shp", stringsAsFactors = FALSE, crs = 2056)
WohnortBadegaeste <- read_csv2("L:/STAT/08_DS/04_Auftraege/2020/A2020_0014/Wohnort Badegäste.csv")
gem <- gem %>%
left_join(WohnortBadegaeste, by = c("GMDNR" = "BFS"))
mybreaks <- c(0, 20, 30, 40, 10000)#quantile(gem$ANZAHL, na.rm = TRUE)
table(gem$ANZAHL, useNA = c("always"))
gem_prep <- gem %>%
filter(!is.na(ANZAHL)) %>%
#codiere Einkommenskategorien
mutate(value=cut(ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F)) %>%
#OPTIONAL: generiere etwas besser lesbare Kategorien-Labels (Werte in '000)
#labels=paste(c(0,breaks[c(-1,-length(breaks))])," - ", (breaks[-1]-1)),include.lowest=T, right=F))
arrange(ANZAHL)
View(gem_prep %>% select(ANZAHL, value))
cols <- brewer.pal(4, "Greens")
gem_prep$col <- cols[findInterval(gem_prep$ANZAHL, vec = as.vector(mybreaks))]
#View(gem_prep)
table(gem_prep$col)
table(gem_prep$value)
View(gem_prep)
t <- levels(cut(gem_prep$ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
x_bbox <- 2669256 # Meteragaben
y_bbox <- 1223896
x_add <- 47644/2
y_add <- 59438/2
bbox_coord = list(rbind(
c(x_bbox, y_bbox),
c(x_bbox, y_bbox+y_add),
c(x_bbox+x_add, y_bbox+y_add),
c(x_bbox+x_add, y_bbox),
c(x_bbox, y_bbox)))
bbox <- st_polygon(bbox_coord) %>%
st_sfc() %>%
st_set_crs(2056)
beschrifutungspunkt <- st_point_on_surface(gem) %>% st_coordinates() %>% as.data.frame()
gem$x <- beschrifutungspunkt$X
gem$y <- beschrifutungspunkt$Y
View(gem)
pdf("./map.pdf", paper='A4r')
legendText1 <- levels(cut(gem_prep$ANZAHL,breaks=mybreaks,include.lowest = TRUE, right=F))
LegendText2 <- "Hallenbad"
fill1 <- cols
fill2 <- NA
par(mar=c(0,0,0,10) )
par(oma=c(0,0,0,0))
#plot(st_geometry(bbox), border="#F8F8FF")
plot(st_geometry(gem_prep), lwd = 0.5, border="#808080", col = gem_prep$col)
plot(st_geometry(see), lwd = 0.5, border="#808080", col = "#b3ecff", add = TRUE)
plot(st_geometry(bez), lwd = 2, border= "#808080", add = TRUE)
plot(st_geometry(gem_sel), lwd = 3, border="#000000", add = TRUE)
plot(st_geometry(hallenbad), pch = 20, col = "#33ccff", cex = 2, add = TRUE)
text(x = gem$x, y = gem$y,  labels = gem$GDE_ID, cex = 0.5)
legend("topright", #x = x_bbox+x_add+5000, y = y_bbox+y_add+5000,
inset = c(- 0.25, 0),
legend = c(legendText1, LegendText2),
fill = c(fill1, fill2),
border =  c("#000000", "#000000", "#000000", "#000000", NA),
pch = c(NA, NA, NA, NA, 20),
col = c(NA, NA, NA, NA, "#33ccff"),
pt.cex = c(1, 2, 1, 1, 2),
bty = "n", # no black bounding boy around legend
xpd=TRUE)
#box(col="red") # plot
#box("figure", col="forestgreen") # mar
#box("outer", col="blue")  # oma
dev.off()
